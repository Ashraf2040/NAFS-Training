generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id            String     @id @default(cuid())
  grade         String
  subject       String
  skill         String
  icon          String? @default("faQuestion")
  quizTitle     String
  isAssigned    Boolean @default(false)
  quizQuestions Question[]
  quizAssets    String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  assignments   QuizAssignment[] // Quizzes assigned by admins
  userQuizzes   UserQuiz[]       // Quizzes completed by students
}

model Question {
  id              String  @id @default(cuid())
  mainQuestion    String
  imageUrl        String?
  choices         String[]
  correctAnswer   Int
  answeredResult  Int      @default(-1)
  statistics      Json?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  fullName  String
  email     String    @unique
  password  String
  role      String    @default("ST") // "AD" for Admin, "ST" for Student
  code      Int       @unique
  trials    String[]  @default([])
  score     Int       @default(0)
  grade     String
  assignments QuizAssignment[] // Quizzes assigned to the user
  quizzes   UserQuiz[]         // Quizzes completed by the user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model QuizAssignment {
  id          String   @id @default(cuid())
  quizId      String
  userId      String
  dueDate     DateTime // Due date for the quiz (15 days after assignment)
  status      String   @default("Not Started") // "ASSIGNED", "COMPLETED"
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignedAt  DateTime @default(now())
  @@unique([quizId, userId]) // Ensure unique assignments per user
}

model UserQuiz {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Int      @default(0)
  userAnswers Json     // Store user answers as JSON
  trialNumber Int      // Track the trial number
  status      String   @default("COMPLETED") // Only "COMPLETED" since it's created after finishing
  user        User     @relation(fields: [userId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, quizId, trialNumber]) // Ensure uniqueness for each trial
}